{"version":3,"names":[],"mappings":"","sources":["serviceworker.js"],"sourcesContent":["/* jslint worker:true */\r\n/* global caches */\r\n'use strict';\r\nvar CACHE_VERSION = '1';\r\nvar CACHE_NAME = 'offline-wiki-cache-v' + CACHE_VERSION;\r\nvar tmpCache = {};\r\n\r\nself.addEventListener('install', event => {\r\n\tevent.waitUntil(\r\n\t\tcaches.open(CACHE_NAME).then(cache => {\r\n\t\t\treturn cache.addAll([\r\n\t\t\t\t'index.html',\r\n\t\t\t\t'nosearch.html',\r\n\t\t\t\t'css/styles.css',\r\n\t\t\t\t'fonts/MaterialIcons-Regular.woff2',\r\n\t\t\t\t'fonts/roboto/Roboto-Bold.woff2',\r\n\t\t\t\t'fonts/roboto/Roboto-Light.woff2',\r\n\t\t\t\t'fonts/roboto/Roboto-Medium.woff2',\r\n\t\t\t\t'fonts/roboto/Roboto-Regular.woff2',\r\n\t\t\t\t'fonts/roboto/Roboto-Thin.woff2',\r\n\t\t\t\t'js/bundle.js',\r\n\t\t\t\t'https://de.wikipedia.org/w/load.php?debug=false&lang=de&modules=site&only=styles&skin=vector'\r\n\t\t\t]);\r\n\t\t})\r\n\t);\r\n});\r\n\r\nself.addEventListener('activate', event => {\r\n\tlet cacheWhitelist = [CACHE_NAME];\r\n\tevent.waitUntil(\r\n\t\tcaches.keys().then(cacheNames => {\r\n\t\t\treturn Promise.all(\r\n\t\t\t\tcacheNames.map(cacheName => {\r\n\t\t\t\t\tif (cacheWhitelist.indexOf(cacheName) === -1) {\r\n\t\t\t\t\t\treturn caches.delete(cacheName);\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t})\r\n\t);\r\n});\r\n\r\nself.addEventListener('fetch', event => {\r\n\tlet requestUrl = new URL(event.request.url);\r\n\tevent.respondWith(\r\n\t\tcaches.match(event.request).then(matchResponse => {\r\n\t\t\tif (matchResponse) {\r\n\t\t\t\treturn matchResponse;\r\n\t\t\t}\r\n\t\t\treturn fetch(event.request.clone()).then(response => {\r\n\t\t\t\tif (requestUrl.hostname === 'de.wikipedia.org' && requestUrl.pathname === '/w/api.php' && requestUrl.search.includes('action=parse') && requestUrl.search.includes('page')) {\r\n\t\t\t\t\ttmpCache[extractParameterValueFromUrl(requestUrl, 'page')] = {\r\n\t\t\t\t\t\trequest: event.request,\r\n\t\t\t\t\t\tresponse: response.clone()\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\treturn response;\r\n\t\t\t});\r\n\t\t})\r\n\t);\r\n});\r\n\r\nself.addEventListener('message', event => {\r\n\tcaches.open(CACHE_NAME).then(cache => {\r\n\t\tlet identifier = encodeURIComponent(event.data.identifier);\r\n\t\tif (event.data.command === 'addToCache') {\r\n\t\t\tif (identifier in tmpCache) {\r\n\t\t\t\tcache.put(tmpCache[identifier].request.clone(), tmpCache[identifier].response.clone())\r\n\t\t\t\t\t.then(() => {\r\n\t\t\t\t\t\tevent.ports[0].postMessage({\r\n\t\t\t\t\t\t\taction: 'added',\r\n\t\t\t\t\t\t\tidentifier: identifier,\r\n\t\t\t\t\t\t\turl: tmpCache[identifier].request.url\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tthrow 'Requested page is not in temporary cache: ' + identifier;\r\n\t\t\t}\r\n\t\t} else if (event.data.command === 'deleteFromCache') {\r\n\t\t\tcache.keys().then(requests => {\r\n\t\t\t\trequests.some(request => {\r\n\t\t\t\t\tif (extractParameterValueFromUrl(new URL(request.url), 'page') === identifier) {\r\n\t\t\t\t\t\tcache.delete(request).then(() => {\r\n\t\t\t\t\t\t\tevent.ports[0].postMessage({\r\n\t\t\t\t\t\t\t\taction: 'deleted',\r\n\t\t\t\t\t\t\t\tidentifier: identifier,\r\n\t\t\t\t\t\t\t\turl: request.url\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t} else if (event.data.command === 'isInCache') {\r\n\t\t\tlet result = false;\r\n\t\t\tcache.keys().then(requests => {\r\n\t\t\t\tresult = requests.some(request => {\r\n\t\t\t\t\tif (extractParameterValueFromUrl(new URL(request.url), 'page') === identifier) {\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}).then(() => {\r\n\t\t\t\tevent.ports[0].postMessage(result);\r\n\t\t\t});\r\n\t\t} else if (event.data.command === 'listArticles') {\r\n\t\t\tlet articles = [];\r\n\t\t\tcache.keys().then(requests => {\r\n\t\t\t\trequests.forEach(request => {\r\n\t\t\t\t\tlet requestUrl = new URL(request.url);\r\n\t\t\t\t\tif (requestUrl.search.includes('action=parse')) {\r\n\t\t\t\t\t\tarticles.push({\r\n\t\t\t\t\t\t\ttitle: decodeURIComponent(extractParameterValueFromUrl(requestUrl, 'page'))\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}).then(() => {\r\n\t\t\t\tevent.ports[0].postMessage(articles);\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tthrow 'Unknown command: ' + event.data.command;\r\n\t\t}\r\n\t}).catch(error => {\r\n\t\tevent.ports[0].postMessage({\r\n\t\t\terror: error\r\n\t\t});\r\n\t});\r\n});\r\n\r\nfunction extractParameterValueFromUrl(url, parameter) {\r\n\tif ('search' in url && typeof url.search == 'string') {\r\n\t\tlet parameterArray = url.search.substring(1).split('&');\r\n\t\tlet parameterValue = false;\r\n\t\tparameterArray.some((parameterString) => {\r\n\t\t\tif (parameterString.indexOf(parameter) === 0) {\r\n\t\t\t\tparameterValue = parameterString.split(\"=\")[1];\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t});\r\n\t\tif (parameterValue !== false) {\r\n\t\t\treturn parameterValue;\r\n\t\t}\r\n\t}\r\n\treturn false;\r\n}"],"file":"serviceworker.js","sourceRoot":"/source/"}